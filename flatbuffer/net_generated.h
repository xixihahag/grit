// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NET_FLAT_H_
#define FLATBUFFERS_GENERATED_NET_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct Test;
struct TestBuilder;

struct Test FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TestBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_T1 = 4,
    VT_T2 = 6
  };
  int32_t t1() const {
    return GetField<int32_t>(VT_T1, 0);
  }
  int32_t t2() const {
    return GetField<int32_t>(VT_T2, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_T1) &&
           VerifyField<int32_t>(verifier, VT_T2) &&
           verifier.EndTable();
  }
};

struct TestBuilder {
  typedef Test Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_t1(int32_t t1) {
    fbb_.AddElement<int32_t>(Test::VT_T1, t1, 0);
  }
  void add_t2(int32_t t2) {
    fbb_.AddElement<int32_t>(Test::VT_T2, t2, 0);
  }
  explicit TestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TestBuilder &operator=(const TestBuilder &);
  flatbuffers::Offset<Test> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Test>(end);
    return o;
  }
};

inline flatbuffers::Offset<Test> CreateTest(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t t1 = 0,
    int32_t t2 = 0) {
  TestBuilder builder_(_fbb);
  builder_.add_t2(t2);
  builder_.add_t1(t1);
  return builder_.Finish();
}

inline const flat::Test *GetTest(const void *buf) {
  return flatbuffers::GetRoot<flat::Test>(buf);
}

inline const flat::Test *GetSizePrefixedTest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::Test>(buf);
}

inline bool VerifyTestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::Test>(nullptr);
}

inline bool VerifySizePrefixedTestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::Test>(nullptr);
}

inline void FinishTestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::Test> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::Test> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_NET_FLAT_H_
