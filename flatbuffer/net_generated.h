// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NET_FLAT_H_
#define FLATBUFFERS_GENERATED_NET_FLAT_H_

#include "flatbuffers/flatbuffers.h"

namespace flat {

struct GtmMsg;
struct GtmMsgBuilder;

struct ipAndPort;
struct ipAndPortBuilder;

struct GtmAckMsg;
struct GtmAckMsgBuilder;

struct Data;
struct DataBuilder;

struct DbServiceMsg;
struct DbServiceMsgBuilder;

struct DbtlMsg;
struct DbtlMsgBuilder;

struct DbtlAckMsg;
struct DbtlAckMsgBuilder;

struct AppMsg;
struct AppMsgBuilder;

struct RootMsg;
struct RootMsgBuilder;

enum Msg {
  Msg_NONE = 0,
  Msg_GtmMsg = 1,
  Msg_GtmAckMsg = 2,
  Msg_DbServiceMsg = 3,
  Msg_DbtlMsg = 4,
  Msg_DbtlAckMsg = 5,
  Msg_AppMsg = 6,
  Msg_MIN = Msg_NONE,
  Msg_MAX = Msg_AppMsg
};

inline const Msg (&EnumValuesMsg())[7] {
  static const Msg values[] = {
    Msg_NONE,
    Msg_GtmMsg,
    Msg_GtmAckMsg,
    Msg_DbServiceMsg,
    Msg_DbtlMsg,
    Msg_DbtlAckMsg,
    Msg_AppMsg
  };
  return values;
}

inline const char * const *EnumNamesMsg() {
  static const char * const names[8] = {
    "NONE",
    "GtmMsg",
    "GtmAckMsg",
    "DbServiceMsg",
    "DbtlMsg",
    "DbtlAckMsg",
    "AppMsg",
    nullptr
  };
  return names;
}

inline const char *EnumNameMsg(Msg e) {
  if (flatbuffers::IsOutRange(e, Msg_NONE, Msg_AppMsg)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesMsg()[index];
}

template<typename T> struct MsgTraits {
  static const Msg enum_value = Msg_NONE;
};

template<> struct MsgTraits<flat::GtmMsg> {
  static const Msg enum_value = Msg_GtmMsg;
};

template<> struct MsgTraits<flat::GtmAckMsg> {
  static const Msg enum_value = Msg_GtmAckMsg;
};

template<> struct MsgTraits<flat::DbServiceMsg> {
  static const Msg enum_value = Msg_DbServiceMsg;
};

template<> struct MsgTraits<flat::DbtlMsg> {
  static const Msg enum_value = Msg_DbtlMsg;
};

template<> struct MsgTraits<flat::DbtlAckMsg> {
  static const Msg enum_value = Msg_DbtlAckMsg;
};

template<> struct MsgTraits<flat::AppMsg> {
  static const Msg enum_value = Msg_AppMsg;
};

bool VerifyMsg(flatbuffers::Verifier &verifier, const void *obj, Msg type);
bool VerifyMsgVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct GtmMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GtmMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_TRANSTYPE = 6
  };
  int32_t type() const {
    return GetField<int32_t>(VT_TYPE, 0);
  }
  const flatbuffers::String *transType() const {
    return GetPointer<const flatbuffers::String *>(VT_TRANSTYPE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_TRANSTYPE) &&
           verifier.VerifyString(transType()) &&
           verifier.EndTable();
  }
};

struct GtmMsgBuilder {
  typedef GtmMsg Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int32_t type) {
    fbb_.AddElement<int32_t>(GtmMsg::VT_TYPE, type, 0);
  }
  void add_transType(flatbuffers::Offset<flatbuffers::String> transType) {
    fbb_.AddOffset(GtmMsg::VT_TRANSTYPE, transType);
  }
  explicit GtmMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GtmMsgBuilder &operator=(const GtmMsgBuilder &);
  flatbuffers::Offset<GtmMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GtmMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<GtmMsg> CreateGtmMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t type = 0,
    flatbuffers::Offset<flatbuffers::String> transType = 0) {
  GtmMsgBuilder builder_(_fbb);
  builder_.add_transType(transType);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<GtmMsg> CreateGtmMsgDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t type = 0,
    const char *transType = nullptr) {
  auto transType__ = transType ? _fbb.CreateString(transType) : 0;
  return flat::CreateGtmMsg(
      _fbb,
      type,
      transType__);
}

struct ipAndPort FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ipAndPortBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IP = 4,
    VT_PORT = 6
  };
  const flatbuffers::String *ip() const {
    return GetPointer<const flatbuffers::String *>(VT_IP);
  }
  int32_t port() const {
    return GetField<int32_t>(VT_PORT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_IP) &&
           verifier.VerifyString(ip()) &&
           VerifyField<int32_t>(verifier, VT_PORT) &&
           verifier.EndTable();
  }
};

struct ipAndPortBuilder {
  typedef ipAndPort Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ip(flatbuffers::Offset<flatbuffers::String> ip) {
    fbb_.AddOffset(ipAndPort::VT_IP, ip);
  }
  void add_port(int32_t port) {
    fbb_.AddElement<int32_t>(ipAndPort::VT_PORT, port, 0);
  }
  explicit ipAndPortBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ipAndPortBuilder &operator=(const ipAndPortBuilder &);
  flatbuffers::Offset<ipAndPort> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ipAndPort>(end);
    return o;
  }
};

inline flatbuffers::Offset<ipAndPort> CreateipAndPort(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> ip = 0,
    int32_t port = 0) {
  ipAndPortBuilder builder_(_fbb);
  builder_.add_port(port);
  builder_.add_ip(ip);
  return builder_.Finish();
}

inline flatbuffers::Offset<ipAndPort> CreateipAndPortDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *ip = nullptr,
    int32_t port = 0) {
  auto ip__ = ip ? _fbb.CreateString(ip) : 0;
  return flat::CreateipAndPort(
      _fbb,
      ip__,
      port);
}

struct GtmAckMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GtmAckMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TXID = 4,
    VT_LIST = 6
  };
  int32_t txid() const {
    return GetField<int32_t>(VT_TXID, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::ipAndPort>> *list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::ipAndPort>> *>(VT_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TXID) &&
           VerifyOffset(verifier, VT_LIST) &&
           verifier.VerifyVector(list()) &&
           verifier.VerifyVectorOfTables(list()) &&
           verifier.EndTable();
  }
};

struct GtmAckMsgBuilder {
  typedef GtmAckMsg Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_txid(int32_t txid) {
    fbb_.AddElement<int32_t>(GtmAckMsg::VT_TXID, txid, 0);
  }
  void add_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::ipAndPort>>> list) {
    fbb_.AddOffset(GtmAckMsg::VT_LIST, list);
  }
  explicit GtmAckMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GtmAckMsgBuilder &operator=(const GtmAckMsgBuilder &);
  flatbuffers::Offset<GtmAckMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GtmAckMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<GtmAckMsg> CreateGtmAckMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t txid = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::ipAndPort>>> list = 0) {
  GtmAckMsgBuilder builder_(_fbb);
  builder_.add_list(list);
  builder_.add_txid(txid);
  return builder_.Finish();
}

inline flatbuffers::Offset<GtmAckMsg> CreateGtmAckMsgDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t txid = 0,
    const std::vector<flatbuffers::Offset<flat::ipAndPort>> *list = nullptr) {
  auto list__ = list ? _fbb.CreateVector<flatbuffers::Offset<flat::ipAndPort>>(*list) : 0;
  return flat::CreateGtmAckMsg(
      _fbb,
      txid,
      list__);
}

struct Data FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_LABEL = 6,
    VT_ATTRIBUTE = 8,
    VT_VALUE = 10
  };
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  const flatbuffers::String *label() const {
    return GetPointer<const flatbuffers::String *>(VT_LABEL);
  }
  const flatbuffers::String *attribute() const {
    return GetPointer<const flatbuffers::String *>(VT_ATTRIBUTE);
  }
  const flatbuffers::String *value() const {
    return GetPointer<const flatbuffers::String *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.VerifyString(key()) &&
           VerifyOffset(verifier, VT_LABEL) &&
           verifier.VerifyString(label()) &&
           VerifyOffset(verifier, VT_ATTRIBUTE) &&
           verifier.VerifyString(attribute()) &&
           VerifyOffset(verifier, VT_VALUE) &&
           verifier.VerifyString(value()) &&
           verifier.EndTable();
  }
};

struct DataBuilder {
  typedef Data Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(Data::VT_KEY, key);
  }
  void add_label(flatbuffers::Offset<flatbuffers::String> label) {
    fbb_.AddOffset(Data::VT_LABEL, label);
  }
  void add_attribute(flatbuffers::Offset<flatbuffers::String> attribute) {
    fbb_.AddOffset(Data::VT_ATTRIBUTE, attribute);
  }
  void add_value(flatbuffers::Offset<flatbuffers::String> value) {
    fbb_.AddOffset(Data::VT_VALUE, value);
  }
  explicit DataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DataBuilder &operator=(const DataBuilder &);
  flatbuffers::Offset<Data> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Data>(end);
    return o;
  }
};

inline flatbuffers::Offset<Data> CreateData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    flatbuffers::Offset<flatbuffers::String> label = 0,
    flatbuffers::Offset<flatbuffers::String> attribute = 0,
    flatbuffers::Offset<flatbuffers::String> value = 0) {
  DataBuilder builder_(_fbb);
  builder_.add_value(value);
  builder_.add_attribute(attribute);
  builder_.add_label(label);
  builder_.add_key(key);
  return builder_.Finish();
}

inline flatbuffers::Offset<Data> CreateDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *key = nullptr,
    const char *label = nullptr,
    const char *attribute = nullptr,
    const char *value = nullptr) {
  auto key__ = key ? _fbb.CreateString(key) : 0;
  auto label__ = label ? _fbb.CreateString(label) : 0;
  auto attribute__ = attribute ? _fbb.CreateString(attribute) : 0;
  auto value__ = value ? _fbb.CreateString(value) : 0;
  return flat::CreateData(
      _fbb,
      key__,
      label__,
      attribute__,
      value__);
}

struct DbServiceMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DbServiceMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_TXID = 6,
    VT_ISCONFLICT = 8,
    VT_LSN = 10,
    VT_READSET = 12,
    VT_WRITESET = 14
  };
  int32_t type() const {
    return GetField<int32_t>(VT_TYPE, 0);
  }
  int32_t txid() const {
    return GetField<int32_t>(VT_TXID, 0);
  }
  bool isConflict() const {
    return GetField<uint8_t>(VT_ISCONFLICT, 0) != 0;
  }
  int32_t lsn() const {
    return GetField<int32_t>(VT_LSN, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::Data>> *readSet() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::Data>> *>(VT_READSET);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::Data>> *writeSet() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::Data>> *>(VT_WRITESET);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyField<int32_t>(verifier, VT_TXID) &&
           VerifyField<uint8_t>(verifier, VT_ISCONFLICT) &&
           VerifyField<int32_t>(verifier, VT_LSN) &&
           VerifyOffset(verifier, VT_READSET) &&
           verifier.VerifyVector(readSet()) &&
           verifier.VerifyVectorOfTables(readSet()) &&
           VerifyOffset(verifier, VT_WRITESET) &&
           verifier.VerifyVector(writeSet()) &&
           verifier.VerifyVectorOfTables(writeSet()) &&
           verifier.EndTable();
  }
};

struct DbServiceMsgBuilder {
  typedef DbServiceMsg Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int32_t type) {
    fbb_.AddElement<int32_t>(DbServiceMsg::VT_TYPE, type, 0);
  }
  void add_txid(int32_t txid) {
    fbb_.AddElement<int32_t>(DbServiceMsg::VT_TXID, txid, 0);
  }
  void add_isConflict(bool isConflict) {
    fbb_.AddElement<uint8_t>(DbServiceMsg::VT_ISCONFLICT, static_cast<uint8_t>(isConflict), 0);
  }
  void add_lsn(int32_t lsn) {
    fbb_.AddElement<int32_t>(DbServiceMsg::VT_LSN, lsn, 0);
  }
  void add_readSet(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::Data>>> readSet) {
    fbb_.AddOffset(DbServiceMsg::VT_READSET, readSet);
  }
  void add_writeSet(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::Data>>> writeSet) {
    fbb_.AddOffset(DbServiceMsg::VT_WRITESET, writeSet);
  }
  explicit DbServiceMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DbServiceMsgBuilder &operator=(const DbServiceMsgBuilder &);
  flatbuffers::Offset<DbServiceMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DbServiceMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<DbServiceMsg> CreateDbServiceMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t type = 0,
    int32_t txid = 0,
    bool isConflict = false,
    int32_t lsn = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::Data>>> readSet = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::Data>>> writeSet = 0) {
  DbServiceMsgBuilder builder_(_fbb);
  builder_.add_writeSet(writeSet);
  builder_.add_readSet(readSet);
  builder_.add_lsn(lsn);
  builder_.add_txid(txid);
  builder_.add_type(type);
  builder_.add_isConflict(isConflict);
  return builder_.Finish();
}

inline flatbuffers::Offset<DbServiceMsg> CreateDbServiceMsgDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t type = 0,
    int32_t txid = 0,
    bool isConflict = false,
    int32_t lsn = 0,
    const std::vector<flatbuffers::Offset<flat::Data>> *readSet = nullptr,
    const std::vector<flatbuffers::Offset<flat::Data>> *writeSet = nullptr) {
  auto readSet__ = readSet ? _fbb.CreateVector<flatbuffers::Offset<flat::Data>>(*readSet) : 0;
  auto writeSet__ = writeSet ? _fbb.CreateVector<flatbuffers::Offset<flat::Data>>(*writeSet) : 0;
  return flat::CreateDbServiceMsg(
      _fbb,
      type,
      txid,
      isConflict,
      lsn,
      readSet__,
      writeSet__);
}

struct DbtlMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DbtlMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_TXID = 6,
    VT_DATA = 8
  };
  int32_t type() const {
    return GetField<int32_t>(VT_TYPE, 0);
  }
  int32_t txid() const {
    return GetField<int32_t>(VT_TXID, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flat::Data>> *data() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flat::Data>> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           VerifyField<int32_t>(verifier, VT_TXID) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.VerifyVectorOfTables(data()) &&
           verifier.EndTable();
  }
};

struct DbtlMsgBuilder {
  typedef DbtlMsg Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int32_t type) {
    fbb_.AddElement<int32_t>(DbtlMsg::VT_TYPE, type, 0);
  }
  void add_txid(int32_t txid) {
    fbb_.AddElement<int32_t>(DbtlMsg::VT_TXID, txid, 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::Data>>> data) {
    fbb_.AddOffset(DbtlMsg::VT_DATA, data);
  }
  explicit DbtlMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DbtlMsgBuilder &operator=(const DbtlMsgBuilder &);
  flatbuffers::Offset<DbtlMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DbtlMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<DbtlMsg> CreateDbtlMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t type = 0,
    int32_t txid = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flat::Data>>> data = 0) {
  DbtlMsgBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_txid(txid);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<DbtlMsg> CreateDbtlMsgDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t type = 0,
    int32_t txid = 0,
    const std::vector<flatbuffers::Offset<flat::Data>> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<flatbuffers::Offset<flat::Data>>(*data) : 0;
  return flat::CreateDbtlMsg(
      _fbb,
      type,
      txid,
      data__);
}

struct DbtlAckMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DbtlAckMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LSN = 4,
    VT_TXID = 6
  };
  int32_t lsn() const {
    return GetField<int32_t>(VT_LSN, 0);
  }
  int32_t txid() const {
    return GetField<int32_t>(VT_TXID, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_LSN) &&
           VerifyField<int32_t>(verifier, VT_TXID) &&
           verifier.EndTable();
  }
};

struct DbtlAckMsgBuilder {
  typedef DbtlAckMsg Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_lsn(int32_t lsn) {
    fbb_.AddElement<int32_t>(DbtlAckMsg::VT_LSN, lsn, 0);
  }
  void add_txid(int32_t txid) {
    fbb_.AddElement<int32_t>(DbtlAckMsg::VT_TXID, txid, 0);
  }
  explicit DbtlAckMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DbtlAckMsgBuilder &operator=(const DbtlAckMsgBuilder &);
  flatbuffers::Offset<DbtlAckMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DbtlAckMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<DbtlAckMsg> CreateDbtlAckMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t lsn = 0,
    int32_t txid = 0) {
  DbtlAckMsgBuilder builder_(_fbb);
  builder_.add_txid(txid);
  builder_.add_lsn(lsn);
  return builder_.Finish();
}

struct AppMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AppMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4
  };
  int32_t type() const {
    return GetField<int32_t>(VT_TYPE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct AppMsgBuilder {
  typedef AppMsg Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int32_t type) {
    fbb_.AddElement<int32_t>(AppMsg::VT_TYPE, type, 0);
  }
  explicit AppMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AppMsgBuilder &operator=(const AppMsgBuilder &);
  flatbuffers::Offset<AppMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<AppMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<AppMsg> CreateAppMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t type = 0) {
  AppMsgBuilder builder_(_fbb);
  builder_.add_type(type);
  return builder_.Finish();
}

struct RootMsg FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef RootMsgBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ANY_TYPE = 4,
    VT_ANY = 6
  };
  flat::Msg any_type() const {
    return static_cast<flat::Msg>(GetField<uint8_t>(VT_ANY_TYPE, 0));
  }
  const void *any() const {
    return GetPointer<const void *>(VT_ANY);
  }
  template<typename T> const T *any_as() const;
  const flat::GtmMsg *any_as_GtmMsg() const {
    return any_type() == flat::Msg_GtmMsg ? static_cast<const flat::GtmMsg *>(any()) : nullptr;
  }
  const flat::GtmAckMsg *any_as_GtmAckMsg() const {
    return any_type() == flat::Msg_GtmAckMsg ? static_cast<const flat::GtmAckMsg *>(any()) : nullptr;
  }
  const flat::DbServiceMsg *any_as_DbServiceMsg() const {
    return any_type() == flat::Msg_DbServiceMsg ? static_cast<const flat::DbServiceMsg *>(any()) : nullptr;
  }
  const flat::DbtlMsg *any_as_DbtlMsg() const {
    return any_type() == flat::Msg_DbtlMsg ? static_cast<const flat::DbtlMsg *>(any()) : nullptr;
  }
  const flat::DbtlAckMsg *any_as_DbtlAckMsg() const {
    return any_type() == flat::Msg_DbtlAckMsg ? static_cast<const flat::DbtlAckMsg *>(any()) : nullptr;
  }
  const flat::AppMsg *any_as_AppMsg() const {
    return any_type() == flat::Msg_AppMsg ? static_cast<const flat::AppMsg *>(any()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ANY_TYPE) &&
           VerifyOffset(verifier, VT_ANY) &&
           VerifyMsg(verifier, any(), any_type()) &&
           verifier.EndTable();
  }
};

template<> inline const flat::GtmMsg *RootMsg::any_as<flat::GtmMsg>() const {
  return any_as_GtmMsg();
}

template<> inline const flat::GtmAckMsg *RootMsg::any_as<flat::GtmAckMsg>() const {
  return any_as_GtmAckMsg();
}

template<> inline const flat::DbServiceMsg *RootMsg::any_as<flat::DbServiceMsg>() const {
  return any_as_DbServiceMsg();
}

template<> inline const flat::DbtlMsg *RootMsg::any_as<flat::DbtlMsg>() const {
  return any_as_DbtlMsg();
}

template<> inline const flat::DbtlAckMsg *RootMsg::any_as<flat::DbtlAckMsg>() const {
  return any_as_DbtlAckMsg();
}

template<> inline const flat::AppMsg *RootMsg::any_as<flat::AppMsg>() const {
  return any_as_AppMsg();
}

struct RootMsgBuilder {
  typedef RootMsg Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_any_type(flat::Msg any_type) {
    fbb_.AddElement<uint8_t>(RootMsg::VT_ANY_TYPE, static_cast<uint8_t>(any_type), 0);
  }
  void add_any(flatbuffers::Offset<void> any) {
    fbb_.AddOffset(RootMsg::VT_ANY, any);
  }
  explicit RootMsgBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RootMsgBuilder &operator=(const RootMsgBuilder &);
  flatbuffers::Offset<RootMsg> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<RootMsg>(end);
    return o;
  }
};

inline flatbuffers::Offset<RootMsg> CreateRootMsg(
    flatbuffers::FlatBufferBuilder &_fbb,
    flat::Msg any_type = flat::Msg_NONE,
    flatbuffers::Offset<void> any = 0) {
  RootMsgBuilder builder_(_fbb);
  builder_.add_any(any);
  builder_.add_any_type(any_type);
  return builder_.Finish();
}

inline bool VerifyMsg(flatbuffers::Verifier &verifier, const void *obj, Msg type) {
  switch (type) {
    case Msg_NONE: {
      return true;
    }
    case Msg_GtmMsg: {
      auto ptr = reinterpret_cast<const flat::GtmMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Msg_GtmAckMsg: {
      auto ptr = reinterpret_cast<const flat::GtmAckMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Msg_DbServiceMsg: {
      auto ptr = reinterpret_cast<const flat::DbServiceMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Msg_DbtlMsg: {
      auto ptr = reinterpret_cast<const flat::DbtlMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Msg_DbtlAckMsg: {
      auto ptr = reinterpret_cast<const flat::DbtlAckMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case Msg_AppMsg: {
      auto ptr = reinterpret_cast<const flat::AppMsg *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifyMsgVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyMsg(
        verifier,  values->Get(i), types->GetEnum<Msg>(i))) {
      return false;
    }
  }
  return true;
}

inline const flat::RootMsg *GetRootMsg(const void *buf) {
  return flatbuffers::GetRoot<flat::RootMsg>(buf);
}

inline const flat::RootMsg *GetSizePrefixedRootMsg(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<flat::RootMsg>(buf);
}

inline bool VerifyRootMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<flat::RootMsg>(nullptr);
}

inline bool VerifySizePrefixedRootMsgBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<flat::RootMsg>(nullptr);
}

inline void FinishRootMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::RootMsg> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedRootMsgBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<flat::RootMsg> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace flat

#endif  // FLATBUFFERS_GENERATED_NET_FLAT_H_
